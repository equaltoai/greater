import * as pulumi from "@pulumi/pulumi";
import * as cloudflare from "@pulumi/cloudflare";

// Get configuration
const config = new pulumi.Config();
const environment = config.require("environment");
const accountId = config.require("accountId");

// Create KV namespaces
const sessionKV = new cloudflare.WorkersKvNamespace("session-kv", {
    accountId: accountId,
    title: `greater-sessions-${environment}`,
});

const cacheKV = new cloudflare.WorkersKvNamespace("cache-kv", {
    accountId: accountId,
    title: `greater-cache-${environment}`,
});

const offlineKV = new cloudflare.WorkersKvNamespace("offline-kv", {
    accountId: accountId,
    title: `greater-offline-${environment}`,
});

const preferencesKV = new cloudflare.WorkersKvNamespace("preferences-kv", {
    accountId: accountId,
    title: `greater-preferences-${environment}`,
});

const oauthAppsKV = new cloudflare.WorkersKvNamespace("oauth-apps-kv", {
    accountId: accountId,
    title: `greater-oauth-apps-${environment}`,
});

// Create R2 buckets
const mediaBucket = new cloudflare.R2Bucket("media-bucket", {
    accountId: accountId,
    name: `greater-media-${environment}`,
    location: "enam",
});

const staticBucket = new cloudflare.R2Bucket("static-bucket", {
    accountId: accountId,
    name: `greater-static-${environment}`,
    location: "enam",
});

// Create D1 database
const analyticsDb = new cloudflare.D1Database("analytics-db", {
    accountId: accountId,
    name: `greater-analytics-${environment}`,
});

// Export the IDs for wrangler.toml generation
export const outputs = {
    sessionKvId: sessionKV.id,
    cacheKvId: cacheKV.id,
    offlineKvId: offlineKV.id,
    preferencesKvId: preferencesKV.id,
    oauthAppsKvId: oauthAppsKV.id,
    mediaBucketName: mediaBucket.name,
    staticBucketName: staticBucket.name,
    analyticsDbId: analyticsDb.id,
    analyticsDbName: analyticsDb.name,
    environment: environment,
};

// Generate wrangler.toml content
const wranglerConfig = pulumi.all([
    sessionKV.id,
    cacheKV.id,
    offlineKV.id,
    preferencesKV.id,
    oauthAppsKV.id,
    mediaBucket.name,
    staticBucket.name,
    analyticsDb.id,
    analyticsDb.name,
]).apply(([sessionId, cacheId, offlineId, preferencesId, oauthAppsId, mediaBucket, staticBucket, analyticsId, analyticsName]) => {
    return `# Auto-generated by Pulumi - DO NOT EDIT MANUALLY
name = "greater-${environment}"
compatibility_date = "2024-01-01"
compatibility_flags = ["nodejs_compat"]
main = "dist/_worker.js/index.js"
account_id = "${accountId}"

[assets]
binding = "ASSETS"
directory = "./dist"

[vars]
ENVIRONMENT = "${environment}"
LESSER_GRAPHQL_HTTP_ENDPOINT = "https://lesser.host/graphql"
LESSER_GRAPHQL_WS_ENDPOINT = "wss://lesser.host/graphql"

[observability]
enabled = true

[[kv_namespaces]]
binding = "SESSIONS"
id = "${sessionId}"

[[kv_namespaces]]
binding = "CACHE"
id = "${cacheId}"

[[kv_namespaces]]
binding = "PREFERENCES"
id = "${preferencesId}"

[[kv_namespaces]]
binding = "OFFLINE"
id = "${offlineId}"

[[kv_namespaces]]
binding = "OAUTH_APPS"
id = "${oauthAppsId}"

[[r2_buckets]]
binding = "MEDIA"
bucket_name = "${mediaBucket}"

[[r2_buckets]]
binding = "STATIC"
bucket_name = "${staticBucket}"

[[d1_databases]]
binding = "ANALYTICS"
database_name = "${analyticsName}"
database_id = "${analyticsId}"
`;
});

export const wranglerConfigContent = wranglerConfig;