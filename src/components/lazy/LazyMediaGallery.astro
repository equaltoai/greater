---
export interface Props {
  attachments: any[]
  sensitive?: boolean
}

const { attachments, sensitive = false } = Astro.props
---

<div 
  class="lazy-media-gallery" 
  data-attachments={JSON.stringify(attachments)}
  data-sensitive={sensitive}
>
  <div class="loading-placeholder">
    <div class="skeleton-image"></div>
  </div>
</div>

<script>
  class LazyMediaGallery extends HTMLElement {
    async connectedCallback() {
      const container = this.querySelector('.lazy-media-gallery')
      if (!container) return

      const attachments = JSON.parse(container.dataset.attachments || '[]')
      const sensitive = container.dataset.sensitive === 'true'

      // Only load when visible
      const observer = new IntersectionObserver(async (entries) => {
        if (entries[0].isIntersecting) {
          observer.disconnect()
          
          const { default: MediaGallery } = await import('../islands/svelte/MediaGallery.svelte')
          const gallery = new MediaGallery({
            target: container,
            props: { attachments, sensitive }
          })
          
          container.innerHTML = ''
        }
      })

      observer.observe(container)
    }
  }

  customElements.define('lazy-media-gallery', LazyMediaGallery)
</script>

<style>
  .loading-placeholder {
    aspect-ratio: 16/9;
    background: var(--color-bg-secondary);
    border-radius: 8px;
    position: relative;
  }

  .skeleton-image {
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
      var(--color-bg-secondary) 25%, 
      var(--color-bg-tertiary) 50%, 
      var(--color-bg-secondary) 75%
    );
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
    border-radius: 8px;
  }

  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
</style>