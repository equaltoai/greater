---
import '@/app.css';
import { ViewTransitions } from 'astro:transitions';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  noIndex?: boolean;
}

const { 
  title, 
  description = 'A modern, fast, and beautiful Mastodon client', 
  image = '/og-image.png',
  noIndex = false 
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="en" data-theme="auto">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title} - Greater</title>
  <meta name="description" content={description}>
  <link rel="canonical" href={canonicalURL}>
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="icon" type="image/png" href="/favicon.png">
  
  <!-- Open Graph -->
  <meta property="og:title" content={title}>
  <meta property="og:description" content={description}>
  <meta property="og:image" content={new URL(image, Astro.url)}>
  <meta property="og:type" content="website">
  <meta property="og:url" content={canonicalURL}>
  
  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={title}>
  <meta name="twitter:description" content={description}>
  <meta name="twitter:image" content={new URL(image, Astro.url)}>
  
  <!-- PWA -->
  <link rel="manifest" href="/manifest.json">
  <meta name="theme-color" content="#6366f1">
  
  <!-- Theme initialization -->
  <script>
    // Initialize theme before render to prevent flash
    (function() {
      const stored = localStorage.getItem('theme-state');
      if (stored) {
        try {
          const state = JSON.parse(stored);
          const mode = state.mode || 'system';
          const isDark = mode === 'dark' || 
            (mode === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);
          
          // Apply theme mode
          document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
          
          // Apply custom theme if active
          if (state.preset === 'custom' && state.activeCustomThemeId && state.customThemes) {
            const theme = state.customThemes.find(t => t.id === state.activeCustomThemeId);
            if (theme && theme.colors) {
              Object.entries(theme.colors).forEach(([key, value]) => {
                if (value) {
                  document.documentElement.style.setProperty(`--color-${key}`, value);
                }
              });
            }
          }
        } catch (e) {
          console.error('Failed to load theme:', e);
        }
      }
    })();
  </script>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="default">
  
  <!-- Resource hints for performance -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  
  <!-- Prefetch critical routes -->
  <link rel="prefetch" href="/home">
  <link rel="prefetch" href="/local">
  <link rel="prefetch" href="/federated">
  
  <!-- DNS prefetch for potential API calls -->
  <link rel="dns-prefetch" href="https://mastodon.social">
  
  <!-- Fonts with font-display swap for better performance -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  
  {noIndex && <meta name="robots" content="noindex, nofollow" />}
  
  <ViewTransitions />
  
  <script is:inline>
    // Theme detection and application
    const theme = localStorage.getItem('theme') || 'auto';
    if (theme === 'auto') {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      document.documentElement.dataset.theme = prefersDark ? 'dark' : 'light';
    } else {
      document.documentElement.dataset.theme = theme;
    }
  </script>
</head>
<body>
  <slot />
  
  <!-- Performance monitoring -->
  <script>
    import { getPerformanceMonitor } from '@/lib/utils/performance';
    
    // Initialize performance monitoring
    if (typeof window !== 'undefined') {
      const monitor = getPerformanceMonitor();
      
      // Report metrics after page load
      window.addEventListener('load', () => {
        setTimeout(() => {
          monitor.reportToAnalytics();
        }, 5000);
      });
    }
  </script>
  
  <!-- Service Worker Registration -->
  <script>
    if ('serviceWorker' in navigator && typeof window !== 'undefined') {
      window.addEventListener('load', async () => {
        try {
          const registration = await navigator.serviceWorker.register('/sw.js');
          console.log('Service Worker registered:', registration.scope);
          
          // Check for updates periodically
          setInterval(() => {
            registration.update();
          }, 60 * 60 * 1000); // Every hour
          
        } catch (error) {
          console.error('Service Worker registration failed:', error);
        }
      });
    }
  </script>
</body>
</html>