import type { MiddlewareHandler } from 'astro';

export const onRequest: MiddlewareHandler = async (context, next) => {
  const startTime = Date.now();
  const requestId = crypto.randomUUID();
  
  try {
    // Log all requests with more detail
    console.log(`[${new Date().toISOString()}] [${requestId}] ${context.request.method} ${context.url.pathname}${context.url.search}`);
    
    // Add request ID for tracing
    context.locals.requestId = requestId;
    
    // Log runtime info if available
    if (context.locals.runtime) {
      console.log(`[${requestId}] Runtime available:`, {
        env: !!context.locals.runtime.env,
        ctx: !!context.locals.runtime.ctx,
        caches: !!context.locals.runtime.caches,
        cf: !!context.locals.runtime.cf,
        // Check for KV bindings
        sessions: !!context.locals.runtime.env?.SESSIONS,
        cache: !!context.locals.runtime.env?.CACHE,
      });
    }
    
    // Set security headers
    const response = await next();
    
    // Log response status
    const duration = Date.now() - startTime;
    console.log(`[${requestId}] Response: ${response.status} (${duration}ms)`);
    
    // Add CORS headers for API routes
    if (context.url.pathname.startsWith('/auth/')) {
      response.headers.set('Access-Control-Allow-Origin', context.url.origin);
      response.headers.set('Access-Control-Allow-Credentials', 'true');
      response.headers.set('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
      response.headers.set('Access-Control-Allow-Headers', 'Content-Type');
    }
    
    // Add request ID to response headers for debugging
    response.headers.set('X-Request-ID', requestId);
    response.headers.set('X-Response-Time', `${duration}ms`);
    
    return response;
  } catch (error) {
    // Log detailed error information
    console.error(`[ERROR] Request failed:`, {
      url: context.url.toString(),
      method: context.request.method,
      headers: Object.fromEntries(context.request.headers.entries()),
      error: error instanceof Error ? {
        message: error.message,
        stack: error.stack,
        name: error.name
      } : error
    });
    
    // Return user-friendly error response with debugging info
    return new Response(
      JSON.stringify({
        error: 'Internal Server Error',
        message: error instanceof Error ? error.message : 'An unexpected error occurred',
        requestId: context.locals.requestId,
        timestamp: new Date().toISOString(),
        // Include more details in production for debugging
        ...(import.meta.env.PROD && {
          details: {
            url: context.url.pathname,
            method: context.request.method,
            errorType: error instanceof Error ? error.name : typeof error,
            // Include stack trace for debugging (remove in production later)
            stack: error instanceof Error ? error.stack?.split('\n').slice(0, 5) : undefined
          }
        })
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          'X-Request-ID': context.locals.requestId || 'unknown'
        }
      }
    );
  }
};